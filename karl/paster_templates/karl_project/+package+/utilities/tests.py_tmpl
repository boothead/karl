from __future__ import with_statement
import unittest

from zope.testing.cleanup import cleanUp

test_message = """A message for *you*.

You are nice.
--- Reply ABOVE THIS LINE to post a comment ---
A quote of some sort.
"""

test_message_gmail = """A message for *you*.

You are nice.

On Tue, Mar 24, 2009 at 5:56 PM, Chris chris@example.org wrote:

> --- Reply ABOVE THIS LINE to post a comment ---
> A quote of some sort.
"""

test_message_outlook = """A message for *you*.

You are nice.

________________________________

From: KARL [mailto:staff-8-test@carlos.agendaless.com]
Sent: Wednesday, March 25, 2009 10:12 AM
To: Test User
Subject: [Staff 8 Test] Email Alert Test

--- Reply ABOVE THIS LINE to post a comment ---

A quote of some sort.
"""

test_message_outlook_express = """A message for *you*.

You are nice.

  ----- Original Message -----
  From: KARL
  To: Test User
  Sent: Tuesday, March 24, 2009 5:00 PM
  Subject: [Staff 8 Test] Email Alert Test


  A quote of some sort.
  """

test_message_thunderbird = """A message for *you*.

You are nice.

KARL wrote:
> --- Reply ABOVE THIS LINE to post a comment ---
> A quote of some sort.
"""

class TestMailinTextScrubber(unittest.TestCase):
    def test_bad_mimetype(self):
        from {{package}}.utilities.mailin import text_scrubber
        self.assertRaises(Exception, text_scrubber, "TEXT", "text/html")
        
    def test_no_mimetype(self, text=test_message):
        from {{package}}.utilities.mailin import text_scrubber
        from {{package}}.utilities.mailin import REPLY_SEPARATOR
        expected = u'<p>A message for <em>you</em>.</p>\n\n<p>You are nice.</p>\n'
        self.assertEqual(expected, text_scrubber(text))

    def test_good_mimetype(self):
        from {{package}}.utilities.mailin import text_scrubber
        from {{package}}.utilities.mailin import REPLY_SEPARATOR
        expected = u'<p>A message for <em>you</em>.</p>\n\n<p>You are nice.</p>\n'
        self.assertEqual(expected, text_scrubber(test_message, 
                                                 mimetype="text/plain"))

    def test_gmail(self):
        self.test_no_mimetype(test_message_gmail)
    
    def test_outlook(self):
        self.test_no_mimetype(test_message_outlook)
        
    def test_outlook_express(self):
        self.test_no_mimetype(test_message_outlook_express)
        
    def test_thunderbird(self):
        self.test_no_mimetype(test_message_thunderbird)
        
class TestOsiMailDelivery(unittest.TestCase):
    tmp_name = '/tmp/white_list.txt'
    
    def _monkey_patch_send(self):
        # Sorry About This Monkeypatch
        from repoze.sendmail.delivery import QueuedMailDelivery
        dummy_send = DummySend()
        QueuedMailDelivery.send = dummy_send
        
        return dummy_send

    def _set_whitelist(self, white_list):
        from repoze.bfg.testing import registerUtility
        from repoze.bfg.interfaces import ISettings
        settings = DummySettings(mail_white_list=self.tmp_name)
        registerUtility(settings, ISettings)

        with open(self.tmp_name, "w") as f:
            for email in white_list:
                print >>f, email
                
    def setUp(self):
        cleanUp()
        self.white_list = None
        
    def tearDown(self):
        cleanUp()
        
        import os
        if os.path.exists(self.tmp_name):
            os.remove(self.tmp_name)
            
    def test_no_whitelist(self):
        from {{package}}.utilities.mailer import OsiMailDelivery
        sender = self._monkey_patch_send()
        delivery = OsiMailDelivery("/dev/null")
        
        delivery.send("a", ["b", "c"], "message")
        self.assertEqual(1, len(sender.calls))
        self.assertEqual(["b", "c"], sender.calls[0]["toaddrs"])
        
    def test_one_recipient(self):
        from {{package}}.utilities.mailer import OsiMailDelivery
        sender = self._monkey_patch_send()
        self._set_whitelist(["b"])
        
        delivery = OsiMailDelivery("/dev/null")
        delivery.send("a", ["b", "c"], "message")
        self.assertEqual(1, len(sender.calls))
        self.assertEqual(["b",], sender.calls[0]["toaddrs"])
        
    def test_no_recipients(self):
        from {{package}}.utilities.mailer import OsiMailDelivery
        sender = self._monkey_patch_send()
        self._set_whitelist(["d"])
        
        delivery = OsiMailDelivery("/dev/null")
        delivery.send("a", ["b", "c"], "message")
        self.assertEqual(0, len(sender.calls))
        
    def test_all_recipients(self):
        from {{package}}.utilities.mailer import OsiMailDelivery
        sender = self._monkey_patch_send()
        self._set_whitelist(["b", "c"])
        
        delivery = OsiMailDelivery("/dev/null")
        delivery.send("a", ["b", "c"], "message")
        self.assertEqual(1, len(sender.calls))
        self.assertEqual(["b", "c"], sender.calls[0]["toaddrs"])
        
class DummySend(object):
    def __init__(self):
        self.calls = []
        
    def __call__(self, fromaddr, toaddrs, message):
        self.calls.append(dict(
            fromaddr=fromaddr,
            toaddrs=toaddrs,
            message=message,
        ))
        
class DummySettings:
    def __init__(self, **kw):
        for k, v in kw.items():
            setattr(self, k, v)

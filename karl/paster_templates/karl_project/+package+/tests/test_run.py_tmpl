import unittest
from repoze.bfg import testing

from zope.testing.cleanup import cleanUp

class TestPopulate(unittest.TestCase):
    def setUp(self):
        cleanUp()

    def tearDown(self):
        cleanUp()

    def _registerComponents(self):
        from repoze.bfg.zcml import zcml_configure
        import {{package}}
        zcml_configure('configure.zcml', package={{package}})

    def _callFUT(self, root, do_transaction_begin=True):
        from {{package}}.run import populate
        populate(root, do_transaction_begin=do_transaction_begin)

    def test_it(self):
        self._registerComponents()
        root = testing.DummyModel()
        connections = {}
        connections['main'] = DummyConnection(root, connections)
        root._p_jar = connections['main']

        self._callFUT(root, False)
        site = root['site']

        communities = site.get('communities')
        self.failUnless(communities)
        self.assertEqual(len(communities), 1)

        default_community = site['communities'].get('default') 
        self.failUnless(default_community)

        profiles = site.get('profiles')
        self.failUnless(profiles)

        admin_profile = profiles.get('admin')
        self.failUnless(admin_profile)

    def test_external_catalog(self):
        self._registerComponents()
        root = testing.DummyModel()
        connections = {}
        connections['main'] = DummyConnection(root, connections)
        connections['catalog'] = DummyConnection(
            testing.DummyModel(), connections)
        root._p_jar = connections['main']

        self._callFUT(root, False)
        self.assertEquals(len(connections['catalog'].added), 1)

        catalog = connections['catalog'].root()['catalog']
        self.assertEquals(root['site'].catalog, catalog)


class DummyToolFactory:
    def add(self, context, request):
        self.context = context
        self.request = request

class DummySecurityWorkflow:
    initial_state_set = False

    def __init__(self, context):
        self.context = context

    def setInitialState(self):
        self.initial_state_set = True

class DummyContent(testing.DummyModel):
    def __init__(self, *arg, **kw):
        self.arg = arg
        self.kw = kw
        testing.DummyModel.__init__(self)

class DummyConnection:
    def __init__(self, root, connections):
        self._root = root
        self.connections = connections
        self.added = []
    def get_connection(self, name):
        return self.connections[name]
    def root(self):
        return self._root
    def add(self, obj):
        self.added.append(obj)

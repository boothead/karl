# Copyright (C) 2008-2009 Open Society Institute
#               Thomas Moroz: tmoroz@sorosny.org
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License Version 2 as published
# by the Free Software Foundation.  You may not use, modify or distribute
# this program under any other version of the GNU General Public License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

""" startover [OPTIONS]

Reset the site to its inital, empty state:

o Delete / recreate the site.

Options
=======

o --yes                    commit the transaction.

o --no                     Don't commit the transaction.

o --zodb-file              Path to the ZODB database
                           (default, 'var/karl.db').

o --quiet (-q)             Quiet:  no extraneous output.

o --verbose (-v)           Increase verbosity of output.
"""

import getopt
import sys
import transaction

from repoze.zodbconn.finder import dbfactory_from_uri

class StartOver:

    do_commit = False
    verbosity = 1
    db_uri = 'zeo://localhost:8884'

    def __init__(self, argv):
        self.parseCommandLine(argv)

    def usage(self, message=None, rc=1):
        print __doc__
        if message is not None:
            print message
            print
        sys.exit(rc)

    def section(self, message, sep='-', verbosity=0):
        if self.verbosity > verbosity:
            print sep * 65
            print message
            print sep * 65

    def parseCommandLine(self, argv):

        self.name, argv = argv[0], argv[1:]

        try:
            opts, args = getopt.getopt(argv, 'qvynz:p:?h',
                                             ['yes',
                                              'no',
                                              'zodb-file=',
                                              'quiet',
                                              'verbose',
                                              'help',
                                             ])
        except getopt.GetoptError, e:
            self.usage(e)

        if args:
            self.usage('No arguments are allowed!')

        for k, v in opts:
            if k in ('-y', '--yes'):
                self.do_commit = True
            elif k in ('-n', '--no'):
                self.do_commit = False
            elif k in ('-z', '--zodb-uri'):
                self.db_uri = v
            elif k in ('-q', '--quiet'):
                self.verbosity = 0
            elif k in ('-v', '--verbose'):
                self.verbosity += 1
            elif k in ('-h', '-?', '--help'):
                self.usage(rc=2)

    def setup(self):
        import {{package}}
        factory = dbfactory_from_uri(self.db_uri)
        db = factory()
        self.db = db
        conn = self.db.open()
        self.root = conn.root()
        from repoze.bfg.zcml import zcml_configure
        zcml_configure('configure.zcml', package={{package}})

    def deleteSite(self):
        self.section('Deleting site.')
        try:
            del self.root['site']
        except KeyError:
            pass

    def createSite(self):
        from {{package}}.run import populate
        self.section('Creating site.')
        populate(self.root, do_transaction_begin=False)

    def initializeEvolution(self):
        from repoze.evolution import ZODBEvolutionManager
        from {{package}}.evolve.zodb import VERSION
        manager = ZODBEvolutionManager(self.root,
                                       '{{package}}.evolve.zodb', VERSION)
        # when we do start_over, we unconditionally set the database's
        # version number to the current code number
        manager._set_db_version(VERSION)

    def __call__(self):
        self.setup()
        self.deleteSite()
        self.createSite()
        self.initializeEvolution()

        if self.do_commit:
            transaction.commit()

def main():
    StartOver(sys.argv)()

if __name__ == '__main__':
    main()
